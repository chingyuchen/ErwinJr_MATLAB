%{
Copyright (c) 2012-2016, Ching-Yu Chen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code or derivatives thereof must retain the 
//       above copyright notice, this list of conditions and the following
//       disclaimer.
//     * Redistributions in binary form, and any binary file that is compiled 
//       from a derivative of this source code, must reproduce the above 
//       copyright notice, this list of conditions and the following disclaimer 
//       in the documentation and/or other materials provided with the 
//       distribution.
//     * Any publication, presentation, or other publicly or privately 
//       presented work having made use of or benefited from this software or 
//       derivatives thereof must explicitly name Kale J. Franz in a section 
//       dedicated to acknowledgements or name Kale J. Franz as a co-author 
//       of the work.
//     * Any use of this software that directly or indirectly contributes to 
//       work or a product for which the user is or will be remunerated must be 
//       further licensed through the Princeton Univeristy Office of Technology 
//       Licensing and the Princeton Univeristy Mid-Infrared Photonics Lab led 
//       by Professor Claire Gmachl prior to the transaction of said 
//       remuneration.  
// 
// THIS SOFTWARE IS PROVIDED BY Ching-Yu Chen ''AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Ching-Yu Chen BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%}
%{
r1 : the ratio of spectra (flux) that overlap with the transitioin l-> d
generated by u -> l trnasition
r2 : the ratio of spectra (flux) that overlap with the transitioin u-> l
generated by l -> d trnasition

* stimulated transiton contribution
dnu/dt = (fluxUL + fluxLD * r2) * crossUL * modeCon * (nl - nu)
dnl/dt = (fluxUL + fluxLD * r2) * crossUL * modeCon * (nu - nl)
         + (fluxLD + fluxUL * r1) * crossLD * modeCon * (nd - nl)
dnd/dt = (fluxLD + fluxUL * r1) * crossLD * modeCon * (nl - nd)

cStim(1) = (fluxUL * r1 + fluxLD * r2) * crossUL * modeCon;    
cStim(2) = (fluxUL * r1 + fluxLD * r2) * crossLD * modeCon;    
cStim(3) = fluxUL * (1 - r1) * crossUL * modeCon;              
cStim(4) = fluxLD * (1 - r2) * crossLD * modeCon;             

Therefore, the stimulated transition contribution is, 
dnu/dt = [cStim(1) + cStim(3)] (nl - nu)
dnl/dt = [cStim(1) + cStim(3)] (nu - nl) + [cStim(2) + cStim(4)] (nd - nl)
dnd/dt = [cStim(2) + cStim(4)] (nl - nd)
%}
function [inputReqn] = stimuTransUpperOnly(inputReqn,  upIn, lowIn, cStim)
    
%{
    % Two optical transitions overlap and interacting part, rate equation
    % coefficients
    CintLU = fluxInter * crossSecUL * modeCon; % cStim(1) 
    CintUU = -1 * CintLU;
    CintUL = CintLU;
    CintDL = fluxInter * crossSecLD * modeCon; % cStim(2)
    CintLL = -1 * (CintUL + CintDL);
    CintLD = CintDL;
    CintDD = -1 * CintLD;
    
    CnonLU = fluxNonInter1 * crossSecUL * modeCon; % cStim(3)
    CnonUU = -1 * CnonLU;
    CnonUL = CnonLU;
    CnonDL = fluxNonInter2 * crossSecLD * modeCon; % cStim(4)
    CnonLL = -1 * (CnonUL + CnonDL);
    CnonLD = CnonDL;
    CnonDD = -1 * CnonLD;
%}
  
    
    % update the new stimulated factor
    inputReqn(upIn, lowIn) = inputReqn(upIn, lowIn) + cStim;
    inputReqn(upIn, upIn) = inputReqn(upIn, upIn) - cStim(1);
    inputReqn(lowIn, upIn) = inputReqn(lowIn, upIn) + cStim(1);
    inputReqn(lowIn, lowIn) = inputReqn(lowIn, lowIn) - cStim(1);
    
end