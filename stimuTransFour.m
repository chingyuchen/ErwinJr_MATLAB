%{
Copyright (c) 2012-2017, Ching-Yu Chen
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code or derivatives thereof must retain the 
//       above copyright notice, this list of conditions and the following
//       disclaimer.
//     * Redistributions in binary form, and any binary file that is compiled 
//       from a derivative of this source code, must reproduce the above 
//       copyright notice, this list of conditions and the following disclaimer 
//       in the documentation and/or other materials provided with the 
//       distribution.
//     * Any publication, presentation, or other publicly or privately 
//       presented work having made use of or benefited from this software or 
//       derivatives thereof must explicitly name Kale J. Franz in a section 
//       dedicated to acknowledgements or name Kale J. Franz as a co-author 
//       of the work.
//     * Any use of this software that directly or indirectly contributes to 
//       work or a product for which the user is or will be remunerated must be 
//       further licensed through the Princeton Univeristy Office of Technology 
//       Licensing and the Princeton Univeristy Mid-Infrared Photonics Lab led 
//       by Professor Claire Gmachl prior to the transaction of said 
//       remuneration.  
// 
// THIS SOFTWARE IS PROVIDED BY Ching-Yu Chen ''AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Ching-Yu Chen BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%}
%{
r1 : the ratio of spectra (flux) that overlap with the transitioin l-> d
generated by u -> l trnasition
r2 : the ratio of spectra (flux) that overlap with the transitioin u-> l
generated by l -> d trnasition

* stimulated transiton contribution
dninj/dt = (fluxInjL + fluxUL * ruinj) * crossInjL * modeCon * (nl - ninj)

dnu/dt = (fluxUL + fluxInjL * rinj + fluxLD * rl) * crossUL * modeCon * (nl - nu)

dnl/dt = (fluxUL + fluxInjL * rinj + fluxLD * rl) * crossUL * modeCon * (nu - nl)
         + (fluxInjL + fluxUL * ruinj) * crossInjL * modeCon * (ninj - nl)
         + (fluxLD + fluxUL * rul) * crossLD * modeCon * (nd - nl)

dnd/dt = (fluxLD  + fluxUL * ru1) * crossLD * modeCon * (nl - nd)


cStim(1) = (fluxInjL + fluxUL * ruinj) * crossInjL * modeCon;
cSrim(2) = (fluxUL + fluxInjL * rinj + fluxLD * rl) * crossUL * modeCon
cStim(3) = (fluxLD *  + fluxUL * ru1) * crossLD * modeCon 
             
Therefore, the stimulated transition contribution is, 
dninj/dt = cStim(1) * (nl - ninj)
dnu/dt = cStim(2) * (nl - nu)
dnl/dt = cStim(1) * (ninj - ninl) + cStim(2) * (nu - nl) + cStim(3) * (nd - nl)
dnd/t = cStim(3) * (nl - nd)
%}

function [inputReqn] = stimuTransFour(inputReqn, injIn, upIn, lowIn, dIn, cStim)
    
    % update the new stimulated factor
    inputReqn(injIn, lowIn) = inputReqn(injIn, lowIn) + cStim(1);
    inputReqn(injIn, injIn) = inputReqn(injIn, injIn) - cStim(1);
    
    inputReqn(upIn, lowIn) = inputReqn(upIn, lowIn) + cStim(2);
    inputReqn(upIn, upIn) = inputReqn(upIn, upIn) - cStim(2);
    
    inputReqn(lowIn, injIn) = inputReqn(lowIn, injIn) + cStim(1);
    inputReqn(lowIn, upIn) = inputReqn(lowIn, upIn) + cStim(2);
    inputReqn(lowIn, lowIn) = inputReqn(lowIn, lowIn) - cStim(1) - cStim(2) - cStim(3);
    inputReqn(lowIn, dIn) = inputReqn(lowIn, dIn) + cStim(3);
    
    inputReqn(dIn, lowIn) = inputReqn(dIn, lowIn) + cStim(3);
    inputReqn(dIn, dIn) = inputReqn(dIn, dIn) - cStim(3);
end